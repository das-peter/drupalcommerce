<?php
// $Id$

/**
 * @file
 * Defines features and functions common to the Commerce modules.
 */


/**
 * Sorts an array of objects by weight through uasort().
 *
 * For sorting arrays of associative arrays, use drupal_sort_weight().
 */
function commerce_sort_weight($a, $b) {
  $a_weight = (is_object($a) && isset($a->weight)) ? $a->weight : 0;
  $b_weight = (is_object($b) && isset($b->weight)) ? $b->weight : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * Returns the e-mail address from which to send commerce related e-mails.
 */
function commerce_email_from() {
  // TODO: Determine the appropriate default value for this setting.
  return variable_get('site_mail', 'admin@example.com');
}

/**
 * Returns a single currency object.
 *
 * @param $currency_code
 *   The code of the currency to return.
 * @return
 *   The specified currency object or FALSE if it does not exist.
 */
function commerce_currency_load($currency_code) {
  $currencies = commerce_currencies();

  return isset($currencies[$currency_code]) ? $currencies[$currency_code] : FALSE;
}

/**
 * Returns an array of all available currencies.
 */
function commerce_currencies() {
  $currencies = &drupal_static(__FUNCTION__);

  if (empty($currencies)) {
    // TODO: Expand to include all currencies per http://drupal.org/node/731604.
    // Define base currencies.
    $currencies = array(
      'EUR' => (object) array(
        'numeric_code' => 978,
        'code' => 'EUR',
        'name' => t('Euro'),
        'symbol' => 'â‚¬',
        'fraction_name' => t('Cent'),
        'decimals' => 2,
      ),
      'USD' => (object) array (
        'numeric_code' => 840,
        'code' => 'USD',
        'name' => t('United States Dollars'),
        'symbol' => '$',
        'fraction_name' => t('Cent'),
        'decimals' => 2,
      ),
    );

    // Allow other modules to modify the currency list.
    drupal_alter('commerce_currency_info', $currencies);
  }

  return $currencies;
}

/**
 * Returns the symbol of any or all currencies.
 *
 * @param $code
 *   Optional parameter specifying the code of the currency whose symbol to return.
 * @return
 *   Either an array of all currency symbols keyed by the currency code or a
 *     string containing the symbol for the specified currency. If a currency is
 *     specified that does not exist, this function returns FALSE.
 */
function commerce_currency_get_symbol($currency_code = NULL) {
  $currencies = commerce_currencies();

  // Return a specific currency symbol if specified.
  if (!empty($currency_code)) {
    if (isset($currencies[$currency_code])) {
      return $currencies[$currency_code]->symbol;
    }
    else {
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($currencies as $currency_code => $currency) {
    $currencies[$currency_code] = $currency->symbol;
  }

  return $currencies;
}
