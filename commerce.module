<?php
// $Id$

/**
 * @file
 * Defines features and functions common to the Commerce modules.
 */


/**
 * Implements hook_permission().
 */
function commerce_permission() {
  $permissions = array(
    'configure store' => array(
      'title' => t('Configure store settings'),
      'description' => t('Allows users to update store currency and contact settings.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Finds all fields of a particular field type.
 *
 * @param $field_type
 *   The type of field to search for.
 * @param $entity_type
 *   Optional entity type to restrict the search to.
 *
 * @return
 *   An array of the matching fields keyed by the field name.
 */
function commerce_info_fields($field_type, $entity_type = NULL) {
  $fields = array();

  // Loop through the fields looking for any product reference fields.
  foreach (field_info_fields() as $field_name => $field) {
    if ($field['type'] == $field_type) {
      // Add this field to the return array if no entity type was specified or
      // if the specified type exists in the field's bundles array.
      if (empty($entity_type) || in_array($entity_type, array_keys($field['bundles']))) {
        $fields[$field_name] = $field;
      }
    }
  }

  return $fields;
}

/**
 * Sorts an array of objects by weight through uasort().
 *
 * For sorting arrays of associative arrays, use drupal_sort_weight().
 */
function commerce_sort_weight($a, $b) {
  $a_weight = (is_object($a) && isset($a->weight)) ? $a->weight : 0;
  $b_weight = (is_object($b) && isset($b->weight)) ? $b->weight : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * Makes any required form elements in a form unrequired.
 *
 * @param $form
 *   The form array to search for required elements.
 */
function commerce_unrequire_form_elements(&$form) {
  array_walk_recursive($form, '_commerce_unrequire_element');
}

/**
 * array_walk_recursive callback: makes an individual element unrequired.
 *
 * @param &$value
 *   The value of the form array being walked.
 * @param $key
 *   The key of the form array corresponding to the present value.
 */
function _commerce_unrequire_element(&$value, $key) {
  if ($key === '#required') {
    $value = FALSE;
  }
}

/**
 * Returns the callback for a form ID as defined by hook_forms().
 *
 * @param $form_id
 *   The form ID to find the callback for.
 * @return
 *   A string containing the form's callback function name.
 *
 * @see drupal_retrieve_form()
 * @see hook_forms()
 */
function commerce_form_callback($form_id, $form_state) {
  // If a function named after the $form_id does not exist, look for its
  // definition in hook_forms().
  if (!function_exists($form_id)) {
    $forms = &drupal_static(__FUNCTION__);

    // In cases where many form_ids need to share a central builder function,
    // such as the product editing form, modules can implement hook_forms(). It
    // maps one or more form_ids to the correct constructor functions.
    if (!isset($forms) || !isset($forms[$form_id])) {
      $forms = module_invoke_all('forms', $form_id, $form_state['build_info']['args']);
    }

    if (isset($forms[$form_id]['callback'])) {
      return $forms[$form_id]['callback'];
    }
  }

  return $form_id;
}

/**
 * Renders a View for display in some other element.
 *
 * @param $view_key
 *   The ID of the View to embed.
 * @param $display_id
 *   The ID of the display of the View that will actually be rendered.
 * @param $arguments
 *   An array of arguments to pass to the View.
 *
 * @return
 *   The rendered output of the chosen View display.
 */
function commerce_embed_view($view_id, $display_id, $arguments) {
  // Load the cart line item View.
  $view = views_get_view($view_id);
  $view->set_display($display_id);

  // Set the specific line items for this order.
  $view->set_arguments($arguments);

  // Prepare and execute the View query.
  $view->pre_execute();
  $view->execute();

  // Return the rendered View.
  return $view->render();
}

/**
 * Returns the e-mail address from which to send commerce related e-mails.
 *
 * Currently this is just using the site's e-mail address, but this may be
 * updated to use a specific e-mail address when we add a settings form for the
 * store's physical address and contact information.
 */
function commerce_email_from() {
  return variable_get('site_mail', ini_get('sendmail_from'));
}

/**
 * Returns a single currency object.
 *
 * @param $currency_code
 *   The code of the currency to return or NULL to return the default currency.
 *
 * @return
 *   The specified currency object or FALSE if it does not exist.
 */
function commerce_currency_load($currency_code = NULL) {
  $currencies = commerce_currencies();

  // Check to see if we should return the default currency.
  if (empty($currency_code)) {
    $currency_code = variable_get('commerce_default_currency', 'USD');
  }

  return isset($currencies[$currency_code]) ? $currencies[$currency_code] : FALSE;
}

/**
 * Returns an array of all available currencies.
 *
 * @param $enabled
 *   Boolean indicating whether or not to return only enabled currencies.
 *
 * @return
 *   An array of altered currency objects keyed by the currency code.
 */
function commerce_currencies($enabled = FALSE) {
  $currencies = &drupal_static(__FUNCTION__);

  if (empty($currencies)) {
    // Establish some default values for currencies.
    $defaults = array(
      'symbol' => '',
      'minor_unit' => '',
      'decimals' => 2,
      'thousands_separator' => ',',
      'decimal_separator' => '.',
      'symbol_placement' => '',
      'code_placement' => '',
      'format_callback' => '',
    );

    // TODO: Expand to include all currencies per http://drupal.org/node/731604.
    // Define base currencies.
    $currencies = array (
      'AFN' => array (
        'code' => 'AFN',
        'symbol' => 'Af',
        'name' => t('Afghan Afghani'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Pul'),
        'major_unit' => t('Afghani'),
      ),
      'ANG' => array (
        'code' => 'ANG',
        'symbol' => 'NAf.',
        'name' => t('Netherlands Antillean Guilder'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 532,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Guilder'),
      ),
      'AOA' => array (
        'code' => 'AOA',
        'symbol' => 'Kz',
        'name' => t('Angolan Kwanza'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 973,
        'minor_unit' => t('CÃªntimo'),
        'major_unit' => t('Kwanza'),
      ),
      'ARM' => array (
        'code' => 'ARM',
        'symbol' => 'm$n',
        'name' => t('Argentine Peso Moneda Nacional'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Centavos'),
        'major_unit' => t('Peso'),
      ),
      'ARS' => array (
        'code' => 'ARS',
        'symbol' => 'AR$',
        'name' => t('Argentine Peso'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '032',
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Peso'),
      ),
      'AUD' => array (
        'code' => 'AUD',
        'symbol' => 'AU$',
        'name' => t('Australian Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '036',
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'AWG' => array (
        'code' => 'AWG',
        'symbol' => 'Afl.',
        'name' => t('Aruban Florin'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 533,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Guilder'),
      ),
      'AZN' => array (
        'code' => 'AZN',
        'symbol' => 'man.',
        'name' => t('Azerbaijani Manat'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Q?pi'),
        'major_unit' => t('New Manat'),
      ),
      'BAM' => array (
        'code' => 'BAM',
        'symbol' => 'KM',
        'name' => t('Bosnia-Herzegovina Convertible Mark'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 977,
        'minor_unit' => t('Fening'),
        'major_unit' => t('Convertible Marka'),
      ),
      'BBD' => array (
        'code' => 'BBD',
        'symbol' => 'Bds$',
        'name' => t('Barbadian Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '052',
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'BDT' => array (
        'code' => 'BDT',
        'symbol' => 'Tk',
        'name' => t('Bangladeshi Taka'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '050',
        'minor_unit' => t('Paisa'),
        'major_unit' => t('Taka'),
      ),
      'BHD' => array (
        'code' => 'BHD',
        'symbol' => 'BD',
        'name' => t('Bahraini Dinar'),
        'decimals' => 3,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '048',
        'minor_unit' => t('Fils'),
        'major_unit' => t('Dinar'),
      ),
      'BIF' => array (
        'code' => 'BIF',
        'symbol' => 'FBu',
        'name' => t('Burundian Franc'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 108,
        'minor_unit' => t('Centime'),
        'major_unit' => t('Franc'),
      ),
      'BMD' => array (
        'code' => 'BMD',
        'symbol' => 'BD$',
        'name' => t('Bermudan Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '060',
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'BND' => array (
        'code' => 'BND',
        'symbol' => 'BN$',
        'name' => t('Brunei Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '096',
        'minor_unit' => t('Sen'),
        'major_unit' => t('Dollar'),
      ),
      'BOB' => array (
        'code' => 'BOB',
        'symbol' => 'Bs',
        'name' => t('Bolivian Boliviano'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '068',
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Bolivianos'),
      ),
      'BRL' => array (
        'code' => 'BRL',
        'symbol' => 'R$',
        'name' => t('Brazilian Real'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 986,
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Reais'),
      ),
      'BSD' => array (
        'code' => 'BSD',
        'symbol' => 'BS$',
        'name' => t('Bahamian Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '044',
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'BTN' => array (
        'code' => 'BTN',
        'symbol' => 'Nu.',
        'name' => t('Bhutanese Ngultrum'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '064',
        'minor_unit' => t('Chetrum'),
        'major_unit' => t('Ngultrum'),
      ),
      'BWP' => array (
        'code' => 'BWP',
        'symbol' => 'BWP',
        'name' => t('Botswanan Pula'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '072',
        'minor_unit' => t('Thebe'),
        'major_unit' => t('Pulas'),
      ),
      'BZD' => array (
        'code' => 'BZD',
        'symbol' => 'BZ$',
        'name' => t('Belize Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '084',
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'CAD' => array (
        'code' => 'CAD',
        'symbol' => 'CA$',
        'name' => t('Canadian Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 124,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'CDF' => array (
        'code' => 'CDF',
        'symbol' => 'CDF',
        'name' => t('Congolese Franc'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 976,
        'minor_unit' => t('Centime'),
        'major_unit' => t('Franc'),
      ),
      'CHF' => array (
        'code' => 'CHF',
        'symbol' => 'Fr.',
        'name' => t('Swiss Franc'),
        'decimals' => 2,
        'rounding' => 5,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 756,
        'minor_unit' => t('Rappen'),
        'major_unit' => t('Franc'),
      ),
      'CLE' => array (
        'code' => 'CLE',
        'symbol' => 'EÂº',
        'name' => t('Chilean Escudo'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('CentÃ©simo'),
        'major_unit' => t('Escudo'),
      ),
      'CLP' => array (
        'code' => 'CLP',
        'symbol' => 'CL$',
        'name' => t('Chilean Peso'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 152,
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Peso'),
      ),
      'CNY' => array (
        'code' => 'CNY',
        'symbol' => 'CNÂ¥',
        'name' => t('Chinese Yuan Renminbi'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 156,
        'minor_unit' => t('Fe'),
        'major_unit' => t('Yuan Renminbi'),
      ),
      'COP' => array (
        'code' => 'COP',
        'symbol' => 'CO$',
        'name' => t('Colombian Peso'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 170,
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Peso'),
      ),
      'CRC' => array (
        'code' => 'CRC',
        'symbol' => 'Â¢',
        'name' => t('Costa Rican ColÃ³n'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 188,
        'minor_unit' => t('CÃ©ntimo'),
        'major_unit' => t('ColÃ³n'),
      ),
      'CUC' => array (
        'code' => 'CUC',
        'symbol' => 'CUC$',
        'name' => t('Cuban Convertible Peso'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Peso'),
      ),
      'CUP' => array (
        'code' => 'CUP',
        'symbol' => 'CU$',
        'name' => t('Cuban Peso'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 192,
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Peso'),
      ),
      'CVE' => array (
        'code' => 'CVE',
        'symbol' => 'CV$',
        'name' => t('Cape Verdean Escudo'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 132,
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Escudo'),
      ),
      'CZK' => array (
        'code' => 'CZK',
        'symbol' => 'Kc',
        'name' => t('Czech Republic Koruna'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 203,
        'minor_unit' => t('HalÃ©r'),
        'major_unit' => t('Koruny'),
      ),
      'DJF' => array (
        'code' => 'DJF',
        'symbol' => 'Fdj',
        'name' => t('Djiboutian Franc'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 262,
        'minor_unit' => t('Centime'),
        'major_unit' => t('Franc'),
      ),
      'DKK' => array (
        'code' => 'DKK',
        'symbol' => 'Dkr',
        'name' => t('Danish Krone'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 208,
        'minor_unit' => t('Ãre'),
        'major_unit' => t('Kroner'),
      ),
      'DOP' => array (
        'code' => 'DOP',
        'symbol' => 'RD$',
        'name' => t('Dominican Peso'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 214,
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Peso'),
      ),
      'DZD' => array (
        'code' => 'DZD',
        'symbol' => 'DA',
        'name' => t('Algerian Dinar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '012',
        'minor_unit' => t('Santeem'),
        'major_unit' => t('Dinar'),
      ),
      'EEK' => array (
        'code' => 'EEK',
        'symbol' => 'Ekr',
        'name' => t('Estonian Kroon'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 233,
        'minor_unit' => t('Sent'),
        'major_unit' => t('Krooni'),
      ),
      'EGP' => array (
        'code' => 'EGP',
        'symbol' => 'EGÂ£',
        'name' => t('Egyptian Pound'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 818,
        'minor_unit' => t('Piastr'),
        'major_unit' => t('Pound'),
      ),
      'ERN' => array (
        'code' => 'ERN',
        'symbol' => 'Nfk',
        'name' => t('Eritrean Nakfa'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 232,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Nakfa'),
      ),
      'ETB' => array (
        'code' => 'ETB',
        'symbol' => 'Br',
        'name' => t('Ethiopian Birr'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 230,
        'minor_unit' => t('Santim'),
        'major_unit' => t('Birr'),
      ),
      'EUR' => array (
        'code' => 'EUR',
        'symbol' => 'â¬',
        'name' => t('Euro'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 978,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Euro'),
      ),
      'FJD' => array (
        'code' => 'FJD',
        'symbol' => 'FJ$',
        'name' => t('Fijian Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 242,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'FKP' => array (
        'code' => 'FKP',
        'symbol' => 'FKÂ£',
        'name' => t('Falkland Islands Pound'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 238,
        'minor_unit' => t('Penny'),
        'major_unit' => t('Pound'),
      ),
      'GBP' => array (
        'code' => 'GBP',
        'symbol' => 'Â£',
        'name' => t('British Pound Sterling'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 826,
        'minor_unit' => t('Penny'),
        'major_unit' => t('Pound'),
      ),
      'GHS' => array (
        'code' => 'GHS',
        'symbol' => 'GH?',
        'name' => t('Ghanaian Cedi'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Pesewa'),
        'major_unit' => t('Cedi'),
      ),
      'GIP' => array (
        'code' => 'GIP',
        'symbol' => 'GIÂ£',
        'name' => t('Gibraltar Pound'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 292,
        'minor_unit' => t('Penny'),
        'major_unit' => t('Pound'),
      ),
      'GMD' => array (
        'code' => 'GMD',
        'symbol' => 'GMD',
        'name' => t('Gambian Dalasi'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 270,
        'minor_unit' => t('Butut'),
        'major_unit' => t('Dalasis'),
      ),
      'GNF' => array (
        'code' => 'GNF',
        'symbol' => 'FG',
        'name' => t('Guinean Franc'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 324,
        'minor_unit' => t('Centime'),
        'major_unit' => t('Franc'),
      ),
      'GTQ' => array (
        'code' => 'GTQ',
        'symbol' => 'GTQ',
        'name' => t('Guatemalan Quetzal'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 320,
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Quetzales'),
      ),
      'GYD' => array (
        'code' => 'GYD',
        'symbol' => 'GY$',
        'name' => t('Guyanaese Dollar'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 328,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'HKD' => array (
        'code' => 'HKD',
        'symbol' => 'HK$',
        'name' => t('Hong Kong Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 344,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'HNL' => array (
        'code' => 'HNL',
        'symbol' => 'HNL',
        'name' => t('Honduran Lempira'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 340,
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Lempiras'),
      ),
      'HRK' => array (
        'code' => 'HRK',
        'symbol' => 'kn',
        'name' => t('Croatian Kuna'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 191,
        'minor_unit' => t('Lipa'),
        'major_unit' => t('Kuna'),
      ),
      'HTG' => array (
        'code' => 'HTG',
        'symbol' => 'HTG',
        'name' => t('Haitian Gourde'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 332,
        'minor_unit' => t('Centime'),
        'major_unit' => t('Gourde'),
      ),
      'HUF' => array (
        'code' => 'HUF',
        'symbol' => 'Ft',
        'name' => t('Hungarian Forint'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 348,
        'minor_unit' => t('FillÃ©r'),
        'major_unit' => t('Forint'),
      ),
      'IDR' => array (
        'code' => 'IDR',
        'symbol' => 'Rp',
        'name' => t('Indonesian Rupiah'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 360,
        'minor_unit' => t('Sen'),
        'major_unit' => t('Rupiahs'),
      ),
      'ILS' => array (
        'code' => 'ILS',
        'symbol' => '?',
        'name' => t('Israeli New Sheqel'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 376,
        'minor_unit' => t('Agora'),
        'major_unit' => t('New Shekels'),
      ),
      'INR' => array (
        'code' => 'INR',
        'symbol' => 'Rs',
        'name' => t('Indian Rupee'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 356,
        'minor_unit' => t('Paisa'),
        'major_unit' => t('Rupee'),
      ),
      'ISK' => array (
        'code' => 'ISK',
        'symbol' => 'Ikr',
        'name' => t('Icelandic KrÃ³na'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 352,
        'minor_unit' => t('Eyrir'),
        'major_unit' => t('Kronur'),
      ),
      'JMD' => array (
        'code' => 'JMD',
        'symbol' => 'J$',
        'name' => t('Jamaican Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 388,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'JOD' => array (
        'code' => 'JOD',
        'symbol' => 'JD',
        'name' => t('Jordanian Dinar'),
        'decimals' => 3,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 400,
        'minor_unit' => t('Piastr'),
        'major_unit' => t('Dinar'),
      ),
      'JPY' => array (
        'code' => 'JPY',
        'symbol' => 'Â¥',
        'name' => t('Japanese Yen'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 392,
        'minor_unit' => t('Sen'),
        'major_unit' => t('Yen'),
      ),
      'KES' => array (
        'code' => 'KES',
        'symbol' => 'Ksh',
        'name' => t('Kenyan Shilling'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 404,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Shilling'),
      ),
      'KMF' => array (
        'code' => 'KMF',
        'symbol' => 'CF',
        'name' => t('Comorian Franc'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 174,
        'minor_unit' => t('Centime'),
        'major_unit' => t('Franc'),
      ),
      'KRW' => array (
        'code' => 'KRW',
        'symbol' => '?',
        'name' => t('South Korean Won'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 410,
        'minor_unit' => t('Jeon'),
        'major_unit' => t('Won'),
      ),
      'KWD' => array (
        'code' => 'KWD',
        'symbol' => 'KD',
        'name' => t('Kuwaiti Dinar'),
        'decimals' => 3,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 414,
        'minor_unit' => t('Fils'),
        'major_unit' => t('Dinar'),
      ),
      'KYD' => array (
        'code' => 'KYD',
        'symbol' => 'KY$',
        'name' => t('Cayman Islands Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 136,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'LAK' => array (
        'code' => 'LAK',
        'symbol' => '?',
        'name' => t('Laotian Kip'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 418,
        'minor_unit' => t('Att'),
        'major_unit' => t('Kips'),
      ),
      'LBP' => array (
        'code' => 'LBP',
        'symbol' => 'LBÂ£',
        'name' => t('Lebanese Pound'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 422,
        'minor_unit' => t('Piastre'),
        'major_unit' => t('Pound'),
      ),
      'LKR' => array (
        'code' => 'LKR',
        'symbol' => 'SLRs',
        'name' => t('Sri Lanka Rupee'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 144,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Rupee'),
      ),
      'LRD' => array (
        'code' => 'LRD',
        'symbol' => 'L$',
        'name' => t('Liberian Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 430,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'LSL' => array (
        'code' => 'LSL',
        'symbol' => 'LSL',
        'name' => t('Lesotho Loti'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 426,
        'minor_unit' => t('Sente'),
        'major_unit' => t('Loti'),
      ),
      'LTL' => array (
        'code' => 'LTL',
        'symbol' => 'Lt',
        'name' => t('Lithuanian Litas'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 440,
        'minor_unit' => t('Centas'),
        'major_unit' => t('Litai'),
      ),
      'LVL' => array (
        'code' => 'LVL',
        'symbol' => 'Ls',
        'name' => t('Latvian Lats'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 428,
        'minor_unit' => t('Santims'),
        'major_unit' => t('Lati'),
      ),
      'LYD' => array (
        'code' => 'LYD',
        'symbol' => 'LD',
        'name' => t('Libyan Dinar'),
        'decimals' => 3,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 434,
        'minor_unit' => t('Dirham'),
        'major_unit' => t('Dinar'),
      ),
      'MMK' => array (
        'code' => 'MMK',
        'symbol' => 'MMK',
        'name' => t('Myanma Kyat'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 104,
        'minor_unit' => t('Pya'),
        'major_unit' => t('Kyat'),
      ),
      'MNT' => array (
        'code' => 'MNT',
        'symbol' => '?',
        'name' => t('Mongolian Tugrik'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 496,
        'minor_unit' => t('MÃ¶ngÃ¶'),
        'major_unit' => t('Tugriks'),
      ),
      'MOP' => array (
        'code' => 'MOP',
        'symbol' => 'MOP$',
        'name' => t('Macanese Pataca'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 446,
        'minor_unit' => t('Avo'),
        'major_unit' => t('Pataca'),
      ),
      'MRO' => array (
        'code' => 'MRO',
        'symbol' => 'UM',
        'name' => t('Mauritanian Ouguiya'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 478,
        'minor_unit' => t('Khoums'),
        'major_unit' => t('Ouguiya'),
      ),
      'MTP' => array (
        'code' => 'MTP',
        'symbol' => 'MTÂ£',
        'name' => t('Maltese Pound'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Shilling'),
        'major_unit' => t('Pound'),
      ),
      'MUR' => array (
        'code' => 'MUR',
        'symbol' => 'MURs',
        'name' => t('Mauritian Rupee'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 480,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Rupee'),
      ),
      'MXP' => array (
        'code' => 'MXP',
        'symbol' => 'MX$',
        'name' => t('Mexican Silver Peso (1861-1992)'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Peso'),
      ),
      'MYR' => array (
        'code' => 'MYR',
        'symbol' => 'RM',
        'name' => t('Malaysian Ringgit'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 458,
        'minor_unit' => t('Sen'),
        'major_unit' => t('Ringgits'),
      ),
      'MZN' => array (
        'code' => 'MZN',
        'symbol' => 'MTn',
        'name' => t('Mozambican Metical'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Metical'),
      ),
      'NAD' => array (
        'code' => 'NAD',
        'symbol' => 'N$',
        'name' => t('Namibian Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 516,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'NGN' => array (
        'code' => 'NGN',
        'symbol' => '?',
        'name' => t('Nigerian Naira'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 566,
        'minor_unit' => t('Kobo'),
        'major_unit' => t('Naira'),
      ),
      'NIO' => array (
        'code' => 'NIO',
        'symbol' => 'C$',
        'name' => t('Nicaraguan Cordoba Oro'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 558,
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Cordoba'),
      ),
      'NOK' => array (
        'code' => 'NOK',
        'symbol' => 'Nkr',
        'name' => t('Norwegian Krone'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 578,
        'minor_unit' => t('Ãre'),
        'major_unit' => t('Krone'),
      ),
      'NPR' => array (
        'code' => 'NPR',
        'symbol' => 'NPRs',
        'name' => t('Nepalese Rupee'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 524,
        'minor_unit' => t('Paisa'),
        'major_unit' => t('Rupee'),
      ),
      'NZD' => array (
        'code' => 'NZD',
        'symbol' => 'NZ$',
        'name' => t('New Zealand Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 554,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'PAB' => array (
        'code' => 'PAB',
        'symbol' => 'B/.',
        'name' => t('Panamanian Balboa'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 590,
        'minor_unit' => t('CentÃ©simo'),
        'major_unit' => t('Balboa'),
      ),
      'PEI' => array (
        'code' => 'PEI',
        'symbol' => 'I/.',
        'name' => t('Peruvian Inti'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('CÃ©ntimo'),
        'major_unit' => t('Inti'),
      ),
      'PEN' => array (
        'code' => 'PEN',
        'symbol' => 'S/.',
        'name' => t('Peruvian Nuevo Sol'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 604,
        'minor_unit' => t('CÃ©ntimo'),
        'major_unit' => t('Nuevos Sole'),
      ),
      'PGK' => array (
        'code' => 'PGK',
        'symbol' => 'PGK',
        'name' => t('Papua New Guinean Kina'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 598,
        'minor_unit' => t('Toea'),
        'major_unit' => t('Kina '),
      ),
      'PHP' => array (
        'code' => 'PHP',
        'symbol' => '?',
        'name' => t('Philippine Peso'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 608,
        'minor_unit' => t('Centavo'),
        'major_unit' => t('Peso'),
      ),
      'PKR' => array (
        'code' => 'PKR',
        'symbol' => 'PKRs',
        'name' => t('Pakistani Rupee'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 586,
        'minor_unit' => t('Paisa'),
        'major_unit' => t('Rupee'),
      ),
      'PLN' => array (
        'code' => 'PLN',
        'symbol' => 'zl',
        'name' => t('Polish Zloty'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 985,
        'minor_unit' => t('Grosz'),
        'major_unit' => t('Zlotych'),
      ),
      'PYG' => array (
        'code' => 'PYG',
        'symbol' => '?',
        'name' => t('Paraguayan Guarani'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 600,
        'minor_unit' => t('CÃ©ntimo'),
        'major_unit' => t('Guarani'),
      ),
      'QAR' => array (
        'code' => 'QAR',
        'symbol' => 'QR',
        'name' => t('Qatari Rial'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 634,
        'minor_unit' => t('Dirham'),
        'major_unit' => t('Rial'),
      ),
      'RHD' => array (
        'code' => 'RHD',
        'symbol' => 'RH$',
        'name' => t('Rhodesian Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'RON' => array (
        'code' => 'RON',
        'symbol' => 'RON',
        'name' => t('Romanian Leu'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Ban'),
        'major_unit' => t('Leu'),
      ),
      'RSD' => array (
        'code' => 'RSD',
        'symbol' => 'din.',
        'name' => t('Serbian Dinar'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Para'),
        'major_unit' => t('Dinars'),
      ),
      'SAR' => array (
        'code' => 'SAR',
        'symbol' => 'SR',
        'name' => t('Saudi Riyal'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 682,
        'minor_unit' => t('Hallallah'),
        'major_unit' => t('Riyals'),
      ),
      'SBD' => array (
        'code' => 'SBD',
        'symbol' => 'SI$',
        'name' => t('Solomon Islands Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => '090',
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'SCR' => array (
        'code' => 'SCR',
        'symbol' => 'SRe',
        'name' => t('Seychellois Rupee'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 690,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Rupee'),
      ),
      'SDD' => array (
        'code' => 'SDD',
        'symbol' => 'LSd',
        'name' => t('Old Sudanese Dinar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 736,
        'minor_unit' => t('None'),
        'major_unit' => t('Dinar'),
      ),
      'SEK' => array (
        'code' => 'SEK',
        'symbol' => 'Skr',
        'name' => t('Swedish Krona'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 752,
        'minor_unit' => t('Ãre'),
        'major_unit' => t('Kronor'),
      ),
      'SGD' => array (
        'code' => 'SGD',
        'symbol' => 'S$',
        'name' => t('Singapore Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 702,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'SHP' => array (
        'code' => 'SHP',
        'symbol' => 'SHÂ£',
        'name' => t('Saint Helena Pound'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 654,
        'minor_unit' => t('Penny'),
        'major_unit' => t('Pound'),
      ),
      'SLL' => array (
        'code' => 'SLL',
        'symbol' => 'Le',
        'name' => t('Sierra Leonean Leone'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 694,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Leone'),
      ),
      'SOS' => array (
        'code' => 'SOS',
        'symbol' => 'Ssh',
        'name' => t('Somali Shilling'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 706,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Shilling'),
      ),
      'SRD' => array (
        'code' => 'SRD',
        'symbol' => 'SR$',
        'name' => t('Surinamese Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'SRG' => array (
        'code' => 'SRG',
        'symbol' => 'Sf',
        'name' => t('Suriname Guilder'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 740,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Guilder'),
      ),
      'STD' => array (
        'code' => 'STD',
        'symbol' => 'Db',
        'name' => t('SÃ£o TomÃ© and PrÃ­ncipe Dobra'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 678,
        'minor_unit' => t('CÃªntimo'),
        'major_unit' => t('Dobra'),
      ),
      'SYP' => array (
        'code' => 'SYP',
        'symbol' => 'SYÂ£',
        'name' => t('Syrian Pound'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 760,
        'minor_unit' => t('Piastre'),
        'major_unit' => t('Pound'),
      ),
      'SZL' => array (
        'code' => 'SZL',
        'symbol' => 'SZL',
        'name' => t('Swazi Lilangeni'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 748,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Lilangeni'),
      ),
      'THB' => array (
        'code' => 'THB',
        'symbol' => '?',
        'name' => t('Thai Baht'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 764,
        'minor_unit' => t('Satang'),
        'major_unit' => t('Baht'),
      ),
      'TND' => array (
        'code' => 'TND',
        'symbol' => 'DT',
        'name' => t('Tunisian Dinar'),
        'decimals' => 3,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 788,
        'minor_unit' => t('Millime'),
        'major_unit' => t('Dinar'),
      ),
      'TOP' => array (
        'code' => 'TOP',
        'symbol' => 'T$',
        'name' => t('Tongan Pa?anga'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 776,
        'minor_unit' => t('Senit'),
        'major_unit' => t('Pa?anga'),
      ),
      'TRY' => array (
        'code' => 'TRY',
        'symbol' => 'TL',
        'name' => t('Turkish Lira'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('Kurus'),
        'major_unit' => t('Lira'),
      ),
      'TTD' => array (
        'code' => 'TTD',
        'symbol' => 'TT$',
        'name' => t('Trinidad and Tobago Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 780,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'TWD' => array (
        'code' => 'TWD',
        'symbol' => 'NT$',
        'name' => t('New Taiwan Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 901,
        'minor_unit' => t('Cent'),
        'major_unit' => t('New Dollar'),
      ),
      'TZS' => array (
        'code' => 'TZS',
        'symbol' => 'TSh',
        'name' => t('Tanzanian Shilling'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 834,
        'minor_unit' => t('Senti'),
        'major_unit' => t('Shilling'),
      ),
      'UAH' => array (
        'code' => 'UAH',
        'symbol' => '?',
        'name' => t('Ukrainian Hryvnia'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 980,
        'minor_unit' => t('Kopiyka'),
        'major_unit' => t('Hryvnia'),
      ),
      'UGX' => array (
        'code' => 'UGX',
        'symbol' => 'USh',
        'name' => t('Ugandan Shilling'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 800,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Shilling'),
      ),
      'USD' => array (
        'code' => 'USD',
        'symbol' => '$',
        'name' => t('US Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 840,
        'minor_unit' => t('Cen'),
        'major_unit' => t('Dollar'),
      ),
      'UYU' => array (
        'code' => 'UYU',
        'symbol' => '$U',
        'name' => t('Uruguayan Peso'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 858,
        'minor_unit' => t('CentÃ©simo'),
        'major_unit' => t('Peso'),
      ),
      'VEF' => array (
        'code' => 'VEF',
        'symbol' => 'Bs.F.',
        'name' => t('Venezuelan BolÃ­var Fuerte'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'minor_unit' => t('CÃ©ntimo'),
        'major_unit' => t('Bolivares Fuerte'),
      ),
      'VND' => array (
        'code' => 'VND',
        'symbol' => '?',
        'name' => t('Vietnamese Dong'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 704,
        'minor_unit' => t('HÃ '),
        'major_unit' => t('Dong'),
      ),
      'VUV' => array (
        'code' => 'VUV',
        'symbol' => 'VT',
        'name' => t('Vanuatu Vatu'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 548,
        'minor_unit' => t('None'),
        'major_unit' => t('Vatu'),
      ),
      'WST' => array (
        'code' => 'WST',
        'symbol' => 'WS$',
        'name' => t('Samoan Tala'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 882,
        'minor_unit' => t('Sene'),
        'major_unit' => t('Tala'),
      ),
      'XAF' => array (
        'code' => 'XAF',
        'symbol' => 'FCFA',
        'name' => t('CFA Franc BEAC'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 950,
        'minor_unit' => t('Centime'),
        'major_unit' => t('Franc'),
      ),
      'XCD' => array (
        'code' => 'XCD',
        'symbol' => 'EC$',
        'name' => t('East Caribbean Dollar'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 951,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Dollar'),
      ),
      'XOF' => array (
        'code' => 'XOF',
        'symbol' => 'CFA',
        'name' => t('CFA Franc BCEAO'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 952,
        'minor_unit' => t('Centime'),
        'major_unit' => t('Franc'),
      ),
      'XPF' => array (
        'code' => 'XPF',
        'symbol' => 'CFPF',
        'name' => t('CFP Franc'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 953,
        'minor_unit' => t('Centime'),
        'major_unit' => t('Franc'),
      ),
      'YER' => array (
        'code' => 'YER',
        'symbol' => 'YR',
        'name' => t('Yemeni Rial'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 886,
        'minor_unit' => t('Fils'),
        'major_unit' => t('Rial'),
      ),
      'ZAR' => array (
        'code' => 'ZAR',
        'symbol' => 'R',
        'name' => t('South African Rand'),
        'decimals' => 2,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 710,
        'minor_unit' => t('Cent'),
        'major_unit' => t('Rand'),
      ),
      'ZMK' => array (
        'code' => 'ZMK',
        'symbol' => 'ZK',
        'name' => t('Zambian Kwacha'),
        'decimals' => 0,
        'rounding' => 0,
        'symbol_placement' => 'before',
        'code_placement' => 'before',
        'numeric_code' => 894,
        'minor_unit' => t('Ngwee'),
        'major_unit' => t('Kwacha'),
      ),
    );

    // Add default values if they don't exist and convert to objects.
    foreach ($currencies as $currency_code => $currency) {
      $currencies[$currency_code] = (object) array_merge($defaults, $currency);
    }

    // Allow other modules to modify the currency list.
    drupal_alter('commerce_currency_info', $currencies);
  }

  // Return only enabled currencies if specified.
  if ($enabled) {
    // Form an array of enabled currencies based on the variable set by the
    // checkboxes element on the currency settings form.
    $enabled_currencies = array_diff(array_values(variable_get('commerce_enabled_currencies', array('USD' => 'USD'))), array(0));

    return array_intersect_key($currencies, drupal_map_assoc($enabled_currencies));
  }

  return $currencies;
}

/**
 * Returns the symbol of any or all currencies.
 *
 * @param $code
 *   Optional parameter specifying the code of the currency whose symbol to return.
 *
 * @return
 *   Either an array of all currency symbols keyed by the currency code or a
 *     string containing the symbol for the specified currency. If a currency is
 *     specified that does not exist, this function returns FALSE.
 */
function commerce_currency_get_symbol($currency_code = NULL) {
  $currencies = commerce_currencies();

  // Return a specific currency symbol if specified.
  if (!empty($currency_code)) {
    if (isset($currencies[$currency_code])) {
      return $currencies[$currency_code]->symbol;
    }
    else {
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($currencies as $currency_code => $currency) {
    $currencies[$currency_code] = $currency->symbol;
  }

  return $currencies;
}

/**
 * Formats a price for a particular currency.
 *
 * @param $price
 *   A numeric price value.
 * @param $currency_code
 *   The three character code of the currency.
 * @param $object
 *   When present, the object to which the price is attached.
 *
 * @return
 *   A fully formatted currency.
 */
function commerce_currency_format($price, $currency_code, $object = NULL) {
  // First load the full currency object.
  $currency = commerce_currency_load($currency_code);

  // Invoke the custom format callback if specified.
  if (!empty($currency->format_callback)) {
    return $currency->format_callback($price, $currency, $entity);
  }

  // Separate the negative symbol from the number itself.
  if ($price < 0) {
    $negative = TRUE;
    $price = abs($price);
  }
  else {
    $negative = FALSE;
  }

  // Format the price as a number.
  $price = number_format(round($price, $currency->decimals), $currency->decimals, $currency->decimal_separator, $currency->thousands_separator);

  // Establish the replacement values to format this price for its currency.
  $replacements = array(
    '@code_before' => $currency->code_placement == 'before' ? $currency->code : '',
    '@symbol_before' => $currency->symbol_placement == 'before' ? $currency->symbol : '',
    '@price' => $price,
    '@symbol_after' => $currency->symbol_placement == 'after' ? $currency->symbol : '',
    '@code_after' => $currency->code_placement == 'after' ? $currency->code : '',
    '@negative' => $negative ? '-' : '',
  );

  return t('@code_before @negative@symbol_before@price @symbol_after @code_after', $replacements);
}
