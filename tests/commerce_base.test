<?php
// $Id$

/**
 * @file
 * Defines abstract base test class for the Commerce module tests.
 */

/**
 * Abstract class for Commerce testing. All Commerce tests should extend this
 * class.
 */
abstract class CommerceBaseTestCase extends DrupalWebTestCase {


  /**
   * Helper function to determine which modules should be enabled. Should be
   * used in place of standard parent::setUp('moduleA', 'moduleB') call.
   *
   * @param $set
   *  Which set of modules to load. Can be one of:
   *    'full': (default) All Commerce modules, including UI and payment modules.
   *    'ui': All API and UI modules.
   *    'api': Just API modules (includes commerce_ui since checkout depends on it).
   *    'dependencies': Common dependencies required by many Commerce API and UI
   *      modules.
   * @param $other_modules
   *  Array of modules to include in addition to the sets loaded by $set
   */
  protected function setUpHelper($set = 'full', array $other_modules = array()) {
    $dependencies = array(
      // API
      'entity',
      'entity_metadata',
      'rules',
      'addressfield',
      // UI
      'views',
      'field',
      'field_ui',
      'field_sql_storage',
    );
    $api = array(
      'commerce',
      'commerce_price',
      'commerce_product',
      'commerce_line_item',
      'commerce_order',
      'commerce_payment',
      'commerce_ui', 'commerce_checkout',
      'commerce_product_reference',
      'commerce_cart',
      'commerce_customer',
    );
    $ui = array(
      //'commerce_ui' // Already added in $api due to checkout module
      'commerce_product_ui',
      'commerce_line_item_ui',
      'commerce_order_ui',
      'commerce_payment_ui',
      'commerce_customer_ui',
    );
    $payment = array(
      'commerce_payment_null',
    );

    // Final module list
    $modules = array();

    // Cascade down the list and add sets
    switch ($set) {
      case 'full':
        $modules = array_merge($payment, $modules);
      case 'ui':
        $modules = array_merge($ui, $modules);
      case 'api':
        $modules = array_merge($api, $modules);
      case 'dependencies':
        $modules = array_merge($dependencies, $modules);
        break;
    }

    // Bring in modules specified by caller
    $modules = array_merge($modules, $other_modules);

    return $modules;
  }

  /**
   * Helper function to get different combinations of permission sets.
   *
   * @param $set
   *  Can be a single string (from the following) or can be an array containing
   *  multiple values that should be merged:
   *    'site admin': Admin permissions for Drupal core modules
   *    'store admin': All commerce "administer X" permissions
   */
  protected function permissionBuilder($sets) {
    if (is_string($sets)) {
      $sets = array($sets);
    }
    $site_admin = array(
      'administer blocks',
      'administer comments',
      'access dashboard',
      'administer filters',
      'administer image styles',
      'administer menu',
      'administer content types',
      'administer nodes',
      'bypass node access',
      'administer url aliases',
      'administer search',
      'administer modules',
      'administer site configuration',
      'administer themes',
      'administer software updates',
      'administer actions',
      'access administration pages',
      'access site in maintenance mode',
      'access site reports',
      'block IP addresses',
      'administer taxonomy',
      'administer permissions',
      'administer users',
    );
    $store_admin = array(
      'administer checkout',
      'configure store',
      'administer customer profiles',
      'administer customer profile types',
      'administer line item types',
      'administer orders',
      'administer products',
      'administer product types',
    );

    $final_permissions = array();

    foreach ($sets as $set) {
      switch ($set) {
        case 'site admin':
          $final_permissions = array_merge($final_permissions, $site_admin);
          break;
        case 'store admin':
          $final_permissions = array_merge($final_permissions, $store_admin);
          break;
      }
    }

    return $final_permissions;
  }

  /**
   * Wrapper to easily create users from arrays returned by permissionBuilder().
   *
   * @param $set
   *  See permissionBuilder() function
   * @return
   *  A user with the permissions returned from permissionBuilder().
   */
  protected function createUserWithPermissionHeper($set) {
    $permissions = $this->permissionBuilder($set);
    $user = $this->drupalCreateUser($permissions);
    return $user;
  }

  /**
   * Returns a site administrator user. Only has permissions for administering
   * modules in Drupal core.
   */
  protected function createSiteAdmin() {
    return $this->createUserWithPermissionHeper('site admin');
  }

  /**
   * Creates a store administrator user. Only has permissions for administering
   * Commerce modules
   */
  protected function createStoreAdmin() {
    return $this->createUserWithPermissionHeper('store admin');
  }
}
