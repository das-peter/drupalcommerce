<?php
// $Id$

/**
 * @file
 * Defines abstract base test class for the Commerce module tests.
 */

/**
 * Abstract class for Commerce testing. All Commerce tests should extend this
 * class.
 */
abstract class CommerceBaseTestCase extends DrupalWebTestCase {


  /**
   * Helper function to determine which modules should be enabled. Should be
   * used in place of standard parent::setUp('moduleA', 'moduleB') call.
   *
   * @param $set
   *  Which set of modules to load. Can be one of:
   *    'full': (default) All Commerce modules, including UI and payment modules.
   *    'ui': All API and UI modules.
   *    'api': Just API modules (includes commerce_ui since checkout depends on it).
   *    'dependencies': Common dependencies required by many Commerce API and UI
   *      modules.
   * @param $other_modules
   *  Array of modules to include in addition to the sets loaded by $set
   */
  protected function setUpHelper($set = 'full', array $other_modules = array()) {

    $dependencies = array(
      // API
      'entity',
      'entity_metadata',
      'rules',
      'addressfield',
      //'rules_admin',
      // UI
      'views',
      //'views_ui',
      'field',
      'field_ui',
      'field_sql_storage',
    );
    $api = array(
      'commerce',
      'commerce_product',
      'commerce_price',
      'commerce_customer',
      'commerce_line_item',
      'commerce_order',
      'commerce_ui', 'commerce_checkout',
      'commerce_product_reference',
      'commerce_payment',
      'commerce_cart',
    );
    $ui = array(
      //'commerce_ui' // Already added in $api due to checkout module
      'commerce_line_item_ui',
      'commerce_order_ui',
      'commerce_product_ui',
      'commerce_customer_ui',
      'commerce_payment_ui',
    );
    $payment = array(
      'commerce_payment_null',
    );

    // Final module list
    $modules = array();

    // Cascade down the list and add sets
    switch ($set) {
      case 'full':
        $modules = array_merge($payment, $modules);
      case 'ui':
        $modules = array_merge($ui, $modules);
      case 'api':
        $modules = array_merge($api, $modules);
      case 'dependencies':
        $modules = array_merge($dependencies, $modules);
        break;
    }

    // Bring in modules specified by caller
    $modules = array_merge($modules, $other_modules);

    return $modules;
  }

  /**
   * Helper function to get different combinations of permission sets.
   *
   * @param $set
   *  Can be a single string (from the following) or can be an array containing
   *  multiple values that should be merged:
   *    'site admin': Admin permissions for Drupal core modules
   *    'store admin': All commerce "administer X" permissions
   */
  protected function permissionBuilder($sets) {
    if (is_string($sets)) {
      $sets = array($sets);
    }
    $site_admin = array(
      'administer blocks',
      'administer comments',
      'access dashboard',
      'administer filters',
      'administer image styles',
      'administer menu',
      'administer content types',
      'administer nodes',
      'bypass node access',
      'administer url aliases',
      'administer search',
      'administer modules',
      'administer site configuration',
      'administer themes',
      'administer software updates',
      'administer actions',
      'access administration pages',
      'access site in maintenance mode',
      'access site reports',
      'block IP addresses',
      'administer taxonomy',
      'administer permissions',
      'administer users',
    );
    $store_admin = array(
      'administer checkout',
      'configure store',
      'administer customer profiles',
      'administer customer profile types',
      'administer line item types',
      'administer orders',
      'administer products',
      'administer product types',
    );

    $final_permissions = array();

    foreach ($sets as $set) {
      switch ($set) {
        case 'site admin':
          $final_permissions = array_merge($final_permissions, $site_admin);
          break;
        case 'store admin':
          $final_permissions = array_merge($final_permissions, $store_admin);
          break;
      }
    }

    return $final_permissions;
  }

  /**
   * Wrapper to easily create users from arrays returned by permissionBuilder().
   *
   * @param $set
   *  See permissionBuilder() function
   * @return
   *  A user with the permissions returned from permissionBuilder().
   */
  protected function createUserWithPermissionHeper($set) {
    $permissions = $this->permissionBuilder($set);
    $user = $this->drupalCreateUser($permissions);
    return $user;
  }

  /**
   * Returns a site administrator user. Only has permissions for administering
   * modules in Drupal core.
   */
  protected function createSiteAdmin() {
    return $this->createUserWithPermissionHeper('site admin');
  }

  /**
   * Returns a store administrator user. Only has permissions for administering
   * Commerce modules.
   */
  protected function createStoreAdmin() {
    return $this->createUserWithPermissionHeper('store admin');
  }


  /**
   * Creates a dummy product type for use with other tests.
   *
   * @return
   *  A product type.
   *  FALSE if the appropraite modules were not available.
   */
  public function createDummyProductType($type = 'product_type', $name = 'Product Type', $description = '', $help = '', $append_random = TRUE) {
    if (module_exists('commerce_product')) {
      if ($append_random) {
        $type = $type .'_'. $this->randomName(20 - strlen($type) - 1);
        $name = $name .' '. $this->randomName(40 - strlen($name) - 1);
        $description = $description .' '. $this->randomString(128);
        $help = $help .' '. $this->randomString(128);
      }
      $new_product_type = commerce_product_type_new();
      $new_product_type->type = $type;
      $new_product_type->name = $name;
      $new_product_type->description = $description;
      $new_product_type->help = $help;
      $new_product_type->is_new = TRUE;
      $save_result = commerce_product_type_save($new_product_type);
      if ($save_result === FALSE) {
        return FALSE;
      }
      return $new_product_type;
    } else {
      return FALSE;
    }
  }

  /**
   * Creates a dummy product for use with other tests.
   *
   * @param $type_given
   *  Optional. The product type to base this product on. Defaults to 'product'.
   * @return
   *  A product type with most of it's basic fields set random values.
   *  FALSE if the appropraite modules were not available.
   */
  public function createDummyProduct($type_given = 'product') {
    if (module_exists('commerce_product')) {
      $new_product = commerce_product_new($type_given);
      $new_product->sku = $sku = $this->randomName(10);
      $new_product->type = $type = $type_given;
      $new_product->title = $title = $this->randomName(10);
      $new_product->uid = $uid = 1;
      $save_result = commerce_product_save($new_product);
      return $new_product;
    } else {
      return FALSE;
    }
  }

  // =============== Helper functions ===============

  /**
   * Checks if a group of modules is enabled.
   *
   * @param $module_name
   *  Array of module names to check (without the .module extension)
   */
  protected function modulesUp($module_names) {
    if (is_string($module_names)) {
      $module_names = array($module_names);
    }
    foreach ($module_names as $module_name) {
      if (!module_exists($module_name)) {
        return FALSE;
      }
    }
    return TRUE;
  }

  /**
   * Wraps the debug() output in a <pre> tag when printing arrays
   */
  public function debugr($var) {
    if (is_array($var) || is_object($var)) {
      debug('<pre>'. var_export($var, TRUE) .'</pre>');
    } else {
      debug($var);
    }
  }
}


/**
 * Test class to test the CommerceBaseTestCase functions. Testing a test.
 * Somewhat meta to be doing this.
 */
class CommerceBaseTesterTestCase extends CommerceBaseTestCase {
  protected $site_admin;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => t('Commerce base class module'),
      'description' => t('Tests the functionality of the base test class.'),
      'group' => t('Drupal Commerce'),
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    $modules = parent::setUpHelper('full');
    parent::setUp($modules);

    $this->site_admin = $this->createSiteAdmin();
  }

  /**
   * Ensure that all of the Commerce modules (and their dependencies) are
   * enabled in the test environment.
   */
  public function testModulesEnabled() {
    $this->drupalLogin($this->site_admin);
    $this->drupalGet('admin/modules');

    $module_ids = $this->getModuleIDs();
    foreach ($module_ids as $module_id) {
      $this->assertFieldChecked($module_id);
    }
  }

  /**
   * Returns the complete list of Commerce modules (and dependencies) as they
   * appear in ID fields on the modules page.
   */
  protected function getModuleIDs() {
    return array(
      'edit-modules-drupal-commerce-commerce-cart-enable',
      'edit-modules-drupal-commerce-commerce-checkout-enable',
      'edit-modules-drupal-commerce-commerce-enable',
      'edit-modules-drupal-commerce-commerce-customer-enable',
      'edit-modules-drupal-commerce-commerce-line-item-enable',
      'edit-modules-drupal-commerce-commerce-order-enable',
      'edit-modules-drupal-commerce-commerce-payment-enable',
      'edit-modules-drupal-commerce-commerce-price-enable',
      'edit-modules-drupal-commerce-commerce-product-enable',
      'edit-modules-drupal-commerce-commerce-product-reference-enable',

      'edit-modules-drupal-commerce-payment-commerce-payment-null-enable',

      'edit-modules-drupal-commerce-ui-commerce-ui-enable',
      'edit-modules-drupal-commerce-ui-commerce-customer-ui-enable',
      'edit-modules-drupal-commerce-ui-commerce-line-item-ui-enable',
      'edit-modules-drupal-commerce-ui-commerce-order-ui-enable',
      'edit-modules-drupal-commerce-ui-commerce-payment-ui-enable',
      'edit-modules-drupal-commerce-ui-commerce-product-ui-enable',

      'edit-modules-other-addressfield-enable',
      'edit-modules-other-entity-enable',
      'edit-modules-other-entity-metadata-enable',

      'edit-modules-rules-rules-enable',

      'edit-modules-views-views-enable',
    );
  }
}

/**
 * Test class during to ensure that the tests themselves are functioning
 * properly. All testTestFoo functions have "testTest" in the name to indicate
 * that they are verifying that a test is working.
 */
class CommerceSandboxTestCase extends CommerceBaseTestCase {
  protected $site_admin;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => t('Commerce sandbox tests'),
      'description' => t('Tests to use during test development to ensure the tests themselves are functioning properly.'),
      'group' => t('Drupal Commerce'),
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    $modules = parent::setUpHelper('full');
    parent::setUp($modules);

    $this->site_admin = $this->createSiteAdmin();
    cache_clear_all(); // Just in case
  }

  /**
   * Sandbox for test development
   */
  public function testTestTest() {
    //$this->_testTestStoreAdmin();
    //$this->_testTestCreateDummyProductType();
    //$this->_testTestCreateDummyProduct();

  }

  /**
   * Test that Store Admin role actually gets set up.
   */
  function _testTestStoreAdmin() {
    $store_admin = $this->createStoreAdmin();
    $this->drupalLogin($store_admin);
    $this->drupalLogin($this->site_admin);
    $this->drupalGet('admin/people/permissions');
  }

  /**
   * Make a test product type
   */
  public function _testTestCreateDummyProductType() {
    $product_type = $this->createDummyProductType();
    debug($product_type);
    $store_admin = $this->createStoreAdmin();
    $this->drupalLogin($store_admin);
    $this->drupalGet('admin/commerce/products/types');
  }

  /**
   * Make a test product
   */
  public function _testTestCreateDummyProduct() {
    //cache_clear_all();
    $this->drupalLogin($this->site_admin);
    // Silly hack to workaround a current bug in views that prevents users from
    //  seeing the admin/commerce/products page.
    $this->drupalPost('admin/modules', array(), 'Save configuration');

    $product = $this->createDummyProduct();
    debug($product);
    $store_admin = $this->createStoreAdmin();
    $this->drupalLogin($store_admin);
    //$super_admin = $this->createUserWithPermissionHeper(array('site admin', 'store admin'));
    //$this->drupalLogin($super_admin);
    $this->drupalGet('admin/commerce/products');
    $this->assertText($product->title, 'Dummy product found on admin page at admin/commerce/products');
    $this->drupalGet('admin/commerce/products/list');
    $this->assertText($product->title, 'Dummy product found on admin page at admin/commerce/products/list');
    $this->drupalGet('admin/commerce/products/add/product');
  }

}
