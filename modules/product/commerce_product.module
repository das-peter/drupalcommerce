<?php
// $Id$

/**
 * @file
 * Defines the core Commerce product entity, including the entity itself, the
 * bundle definitions (product types), and various API functions to manage
 * products and interact with them through forms ad autocompletes.
 */

/**
 * Implements hook_menu().
 */
function commerce_product_reference_menu() {
  $items = array();

  $items['commerce_product/autocomplete'] = array(
    'title' => 'commerce_product autocomplete',
    'page callback' => 'commerce_product_autocomplete',
    'access arguments' => array('access products'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function commerce_product_entity_info() {
  $return =  array(
    'commerce_product' => array(
      'label' => t('Product'),
      'base table' => 'commerce_product',
      'fieldable' => TRUE,
      'path callback' => 'commerce_product_path',
      'object keys' => array(
        'id' => 'product_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'commerce_product_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
        ),
      ),
    ),
  );

  foreach (commerce_product_types() as $product_type) {
    $return['commerce_product']['bundles'][$product_type['type']] = array(
      'label' => $product_type['name'],
    );
  }

  return $return;
}

/**
 * Implements hook_field_extra_fields().
 */
function commerce_product_field_extra_fields() {
  $extra = array();

  foreach (commerce_product_types() as $type) {
    $extra['commerce_product'][$type['type']] = array(
      'sku' => array(
        'label' => 'Product SKU',
        'description' => t('Product module SKU form element'),
        'weight' => -10,
      ),
      'title' => array(
        'label' => 'Title',
        'description' => t('Product module title form element'),
        'weight' => -5,
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_views_api().
 */
function commerce_product_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'commerce_product') . '/includes/views',
  );
}

/**
 * Implements hook_permission().
 */
function commerce_product_permission() {
  $permissions = array(
    'administer products' => array(
      'title' => t('Administer products'),
    ),
    'administer product types' => array(
      'title' => t('Administer product types'),
    ),
    'access products' => array(
      'title' => t('Access lists of products, primarily for viewing and referencing'),
    ),
    'create products' => array(
      'title' => t('Create products'),
    ),
  );

  // Add product type specific permissions. Note that users with administer
  // products permission should have access to do anything the permissions below
  // grant a user to do.
  foreach (commerce_product_types() as $product_type) {
    $permissions['create ' . $product_type['type']] = array(
      'title' => t('Create %type products', array('%type' => $product_type['name'])),
    );
    $permissions['edit any ' . $product_type['type']] = array(
      'title' => t('Edit or delete any %type product', array('%type' => $product_type['name'])),
    );
    $permissions['edit own ' . $product_type['type']] = array(
      'title' => t('Edit or delete own %type products', array('%type' => $product_type['name'])),
    );
  }

  return $permissions;
}

/**
 * Returns an array of product types.
 */
function commerce_product_types() {
  // First check the static cache for a product types array.
  $types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($types)) {
    $types = db_query('SELECT * FROM {commerce_product_type}')->fetchAllAssoc('type', PDO::FETCH_ASSOC);
  }

  return $types;
}

/**
 * Returns the human readable name of any or all product types.
 *
 * @param $type
 *   Optional parameter specifying the type whose name to return.
 * @return
 *   Either an array of all product type names keyed by the machine name or a
 *     string containing the human readable name for the specified type. If a
 *     type is specified that does not exist, this function returns FALSE.
 */
function commerce_product_type_get_name($type = NULL) {
  $product_types = commerce_product_types();

  // Return a type name if specified and it exists.
  if (!empty($type)) {
    if (isset($product_types[$type])) {
      return $product_types[$type]['name'];
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($product_types as $key => $value) {
    $product_types[$key] = $value['name'];
  }

  return $types;
}

/**
 * Resets the cached list of product types.
 */
function commerce_product_types_reset() {
  $types = &drupal_static('commerce_product_types');
  $types = NULL;
}

/**
 * Loads a product type.
 */
function commerce_product_type_load($type) {
  return db_query('SELECT * FROM {commerce_product_type} WHERE type = :type', array(':type' => $type))->fetchObject();
}

/**
 * Returns a path argument from a product type.
 */
function commerce_product_type_to_arg($type) {
  return $type;
}

/**
 * Saves a product type.
 */
function commerce_product_type_save($product_type) {
  $op = drupal_write_record('commerce_product_type', $product_type, empty($product_type->is_new) ? 'type' : NULL);
  menu_rebuild();

  if (!empty($product_type->is_new)) {
    // Notify the field API that a new bundle has been created.
    field_attach_create_bundle('commerce_product', $product_type->type);
  }

  return $op;
}

/**
 * Deletes a product type.
 */
function commerce_product_type_delete($type) {
  db_delete('commerce_product_type')
    ->condition('type', $type)
    ->execute();

  // Notify the field API that this bundle has been destroyed.
  field_attach_delete_bundle('commerce_product', $type);
}

/**
 * Title callback: return the product type title.
 */
function commerce_product_type_title($product_type) {
  return $product_type->name;
}

/**
 * Loads a product by ID.
 */
function commerce_product_load($product_id) {
  $products = commerce_product_load_multiple(array($product_id), array());
  return $products ? reset($products) : FALSE;
}

/**
 * Loads a product by SKU.
 */
function commerce_product_load_by_sku($sku) {
  $products = commerce_product_load_multiple(array(), array('sku' => $sku));
  return $products ? reset($products) : FALSE;
}

/**
 * Loads multiple products by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $product_ids
 *   An array of product IDs.
 * @param $conditions
 *   An array of conditions on the {commerce_product} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal product loading cache.
 *
 * @return
 *   An array of product objects indexed by product_id.
 */
function commerce_product_load_multiple($product_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_product', $product_ids, $conditions, $reset);
}

/**
 * Saves a product.
 *
 * @param $product
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_product_save($product) {
  $transaction = db_transaction();

  try {
    $product->changed = time();

    // Give modules the opportunity to prepare field data for saving.
    field_attach_presave('commerce_product', $product);

    // If this is a new product...
    if (empty($product->product_id)) {
      // Set the creation timestamp.
      $product->created = time();

      // Save the new product and fields.
      drupal_write_record('commerce_product', $product);
      field_attach_insert('commerce_product', $product);

      $op = 'insert';
    }
    else {
      // Save the updated product and fields.
      drupal_write_record('commerce_product', $product, 'product_id');
      field_attach_update('commerce_product', $product);

      $op = 'update';
    }

    // Ignore slave server temporarily to give time for the
    // saved product to be propagated to the slave.
    db_ignore_slave();

    return TRUE;
  }
  catch (Exception $e) {
    $transaction->rollback('commerce product', $e->getMessage(), array(), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Deletes a product by ID.
 *
 * @param $product_id
 *   The ID of the product to delete.
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_product_delete($product_id) {
  return commerce_product_delete_multiple(array($product_id));
}

/**
 * Deletes multiple products by ID.
 *
 * @param $product_ids
 *   An array of product IDs to delete.
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_product_delete_multiple($product_ids) {
  if (!empty($product_ids)) {
    $products = commerce_product_load_multiple($product_ids, array());

    // TODO: We'll need to ensure products on orders cannot be deleted when we
    // have orders implemented.

    $transaction = db_transaction();

    try {
      db_delete('commerce_product')
        ->condition('product_id', $product_ids, 'IN')
        ->execute();

      foreach ($products as $product_id => $product) {
        module_invoke_all('commerce_product_delete', $product);
        field_attach_delete('commerce_product', $product);
      }

      // Ignore slave server temporarily to give time for the
      // saved product to be propagated to the slave.
      db_ignore_slave();
    }
    catch (Exception $e) {
      $transaction->rollback('commerce product', $e->getMessage(), array(), WATCHDOG_ERROR);
      return FALSE;
    }

    // Clear the page and block and product_load_multiple caches.
    cache_clear_all();
    entity_get_controller('commerce_product')->resetCache();
  }

  return TRUE;
}

/**
 * Returns the path to a product.
 */
function commerce_product_path($product) {
  return 'admin/commerce/products/' . $product->product_id . '/edit';
}

/**
 * Returns output for product autocompletes.
 *
 * The values returned will be keyed by SKU and appear as such in the textfield,
 * even though the preview in the autocomplete list shows "SKU: Title".
 */
function commerce_product_autocomplete($field_name, $string = '') {
  $field = field_info_field($field_name);
  $matches = array();

  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $tags_typed = drupal_explode_tags($string);
  $tag_last = drupal_strtolower(array_pop($tags_typed));

  if (!empty($tag_last)) {
    $prefix = count($tags_typed) ? implode(', ', $tags_typed) . ', ' : '';

    // Determine the type of autocomplete match to use when searching for products.
    $match = isset($field['widget']['autocomplete_match']) ? $field['widget']['autocomplete_match'] : 'contains';

    // Get an array of matching products.
    $products = commerce_product_match_products($field, $tag_last, $match, array(), 10);

    // Loop through the products and convert them into autocomplete output.
    foreach ($products as $product_id => $data) {
      // Add a class wrapper for a few required CSS overrides.
      $matches[$prefix . $data['sku']] = '<div class="reference-autocomplete">' . $data['rendered'] . '</div>';
    }
  }

  drupal_json_output($matches);
}

/**
 * Fetches an array of all products matching the given parameters.
 *
 * This info is used in various places (allowed values, autocomplete results,
 * input validation...). Some of them only need the product_ids, others
 * product_id + titles, others yet product_id + titles + rendered row (for
 * display in widgets).
 *
 * The array we return contains all the potentially needed information,
 * and lets calling functions use the parts they actually need.
 *
 * @param $field
 *   The field description.
 * @param $string
 *   Optional string to filter SKUs and titles on (used by autocomplete).
 * @param $match
 *   Operator to match filtered SKUs and titles against, can be any of:
 *   'contains', 'equals', 'starts_with'
 * @param $ids
 *   Optional product ids to lookup (the $string and $match arguments will be
 *   ignored).
 * @param $limit
 *   If non-zero, limit the size of the result set.
 *
 * @return
 *   An array of valid products in the form:
 *   array(
 *     product_id => array(
 *       'product_sku' => The product SKU,
 *       'title' => The product title,
 *       'rendered' => The text to display in widgets (can be HTML)
 *     ),
 *     ...
 *   )
 */
function commerce_product_match_products($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = implode(':', array(
    $field['field_name'],
    $match,
    ($string !== '' ? $string : implode('-', $ids)),
    $limit,
  ));

  if (!isset($results[$cid])) {
    $matches = _commerce_product_match_products_standard($field, $string, $match, $ids, $limit);

    // Store the results.
    $results[$cid] = !empty($matches) ? $matches : array();
  }

  return $results[$cid];
}

/**
 * Helper function for _commerce_product_match_products().
 *
 * Returns an array of products matching the specific parameters.
 */
function _commerce_product_match_products_standard($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  // Build the query object with the necessary fields.
  $query = db_select('commerce_product', 'cp');
  $product_id_alias = $query->addField('cp', 'product_id');
  $product_sku_alias = $query->addField('cp', 'sku');
  $product_title_alias = $query->addField('cp', 'title');
  $product_type_alias = $query->addField('cp', 'type');

  // Add a condition to the query to filter by matching product types.
  if (is_array($field['settings']['referenceable_types']) && !empty($field['settings']['referenceable_types'])) {
    $types = array_diff(array(0), array_values($field['settings']['referenceable_types']));

    // Only filter by type if some types have been specified.
    if (!empty($types)) {
      $query->condition('cp.type', $field['settings']['referenceable_types'], 'IN');
    }
  }

  if ($string !== '') {
    $args = array();

    // Build a where clause matching on either the SKU or title.
    switch ($match) {
      case 'contains':
        $where = '(cp.sku LIKE :sku_match OR cp.title LIKE :title_match)';
        $args['sku_match'] = '%' . $string . '%';
        $args['title_match'] = '%' . $string . '%';
        break;

      case 'starts_with':
        $where = '(cp.sku LIKE :sku_match OR cp.title LIKE :title_match)';
        $args['sku_match'] = $string . '%';
        $args['title_match'] = $string . '%';
        break;

      case 'equals':
      default:
        $where = '(cp.sku = :match OR cp.title = :match)';
        $args['sku_match'] = $string;
        $args['title_match'] = $string;
        break;
    }

    $query->where($where, $args);
  }
  elseif ($ids) {
    // Otherwise add a product_id specific condition if specified.
    $query->condition($product_id_alias, $ids, 'IN', $ids);
  }

  // Order the results by SKU, title, and then product type.
  $query
    ->orderBy($product_sku_alias)
    ->orderBy($product_title_alias)
    ->orderBy($product_type_alias);

  // Add a limit if specified.
  if ($limit) {
    $query->range(0, $limit);
  }

  // Execute the query and build the results array.
  $result = $query->execute();

  $matches = array();

  foreach ($result->fetchAll() as $product) {
    $matches[$product->product_id] = array(
      'sku' => $product->sku,
      'type' => $product->type,
      'title' => $product->title,
      'rendered' => t('@sku: @title', array('@sku' => $product->sku, '@title' => $product->title)),
    );
  }

  return $matches;
}
