<?php
// $Id$

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function commerce_product_ui_menu() {
  $items = array();

  // Note: admin/commerce/products will be created by Views.

  // Add a product.
  $items['admin/commerce/products/add'] = array(
    'title' => 'Add a product',
    'page callback' => 'commerce_product_ui_add_page',
    'access callback' => 'commerce_product_ui_product_add_any_access',
    'file' => 'includes/commerce_product_ui.products.inc',
  );
  foreach (commerce_product_types() as $type => $product_type) {
    $items['admin/commerce/products/add/' . $type] = array(
      'title' => $product_type->name,
      'title callback' => 'check_plain',
      'description' => $product_type->description,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_product_ui_product_form', commerce_product_new($type)),
      'access callback' => 'commerce_product_access',
      'access arguments' => array('create', $type),
      'file' => 'includes/commerce_product_ui.products.inc',
    );
  }

  $items['admin/commerce/products/%commerce_product/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_product_ui_product_form', 3),
    'access callback' => 'commerce_product_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_product_ui.products.inc',
  );
  $items['admin/commerce/products/%commerce_product/delete'] = array(
    'title' => 'Delete a product',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_product_ui_product_delete_form', 3),
    'access callback' => 'commerce_product_access',
    'access arguments' => array('update', 3),
    'file' => 'includes/commerce_product_ui.products.inc',
  );

  $items['admin/commerce/products/types'] = array(
    'title' => 'Product types',
    'description' => 'Manage products types for your store.',
    'page callback' => 'commerce_product_ui_types_overview',
    'page arguments' => array(),
    'access arguments' => array('administer products'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'includes/commerce_product_ui.types.inc',
  );
  $items['admin/commerce/products/types/add'] = array(
    'title' => 'Add product type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_product_ui_type_form', commerce_product_type_new()),
    'access arguments' => array('administer product types'),
    'type' => MENU_LOCAL_ACTION | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'includes/commerce_product_ui.types.inc',
  );
  $items['admin/commerce/products/types/%commerce_product_type'] = array(
    'title callback' => 'commerce_product_type_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_product_ui_type_form', 4),
    'access arguments' => array('administer product types'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_product_ui.types.inc',
  );
  $items['admin/commerce/products/types/%commerce_product_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/products/types/%commerce_product_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_product_ui_type_delete_form', 4),
    'access arguments' => array('administer product types'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 10,
    'file' => 'includes/commerce_product_ui.types.inc',
  );

  return $items;
}

/**
 * Access callback: determine if the user can create any type of product.
 */
function commerce_product_ui_product_add_any_access() {
  // Grant automatic access to users with administer product types access.
  if (user_access('administer product types')) {
    return TRUE;
  }

  // Check the user's access on a product type basis.
  foreach (commerce_product_types() as $type => $product_type) {
    if (commerce_product_ui_product_add_access($type)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_menu_alter().
 */
function commerce_product_ui_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
  $items['admin/commerce/products/types/%commerce_product_type/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  $items['admin/commerce/products/types/%commerce_product_type/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_product_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'admin/commerce/products/add' on 'admin/commerce/products' page.
  if ($root_path == 'admin/commerce/products') {
    $item = menu_get_item('admin/commerce/products/add');
    if ($item['access']) {
      $item['title'] = t('Add a product');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_admin_paths().
 */
function commerce_product_ui_admin_paths() {
  $paths = array(
    'admin/commerce/products' => TRUE,
    'admin/commerce/products/add' => TRUE,
    'admin/commerce/products/add/*' => TRUE,
    'admin/commerce/products/*/edit' => TRUE,
    'admin/commerce/products/*/delete' => TRUE,
    'admin/commerce/products/types' => TRUE,
    'admin/commerce/products/types/add' => TRUE,
    'admin/commerce/products/types/*' => TRUE,
    'admin/commerce/products/types/*/edit' => TRUE,
    'admin/commerce/products/types/*/delete' => TRUE,
  );

  return $paths;
}

/**
 * Implements hook_help().
 */
function commerce_product_ui_help($path, $arg) {
  switch ($path) {
    case 'admin/commerce/products/types/add':
      return '<p>' . t('Individual product types can have different fields assigned to them.') . '</p>';
  }

  // Return the user defined help text per product type when adding products.
  if ($arg[1] == 'commerce' && $arg[2] == 'products' && $arg[3] == 'add' && $arg[4]) {
    $product_type = commerce_product_type_load(str_replace('-', '_', $arg[4]));
    return (!empty($product_type->help) ? '<p>' . filter_xss_admin($product_type->help) . '</p>' : '');
  }
}

/**
 * Implements hook_theme().
 */
function commerce_product_ui_theme() {
  return array(
    'product_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'includes/commerce_product_ui.products.inc',
    ),
    'product_type_admin_overview' => array(
      'variables' => array('type' => NULL),
      'file' => 'includes/commerce_product_ui.types.inc',
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 *
 * Expose the admin UI for product fields.
 */
function commerce_product_ui_entity_info_alter(&$entity_info) {
  foreach ($entity_info['commerce_product']['bundles'] as $type => &$bundle) {
    $bundle['admin'] = array(
      'path' => 'admin/commerce/products/types/%commerce_product_type',
      'real path' => 'admin/commerce/products/types/' . $type,
      'bundle argument' => 4,
      'access arguments' => array('administer product types'),
    );
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_product_ui_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'commerce_product_ui') . '/includes/views',
  );
}
