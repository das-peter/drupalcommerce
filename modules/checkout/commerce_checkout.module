<?php
// $Id$

/**
 * @file
 * Enable checkout as a multi-step form with customizable pages and a simple
 *   checkout pane API.
 */


/**
 * Implements hook_menu().
 */
function commerce_checkout_menu() {
  $items = array();

  $items['checkout'] = array(
    'title' => 'Checkout',
    'page callback' => 'commerce_checkout_router',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_checkout.pages.inc',
  );
  $items['checkout/complete/%commerce_order'] = array(
    'title' => 'Checkout complete',
    'page callback' => 'commerce_checkout_completion',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_checkout.pages.inc',
  );

  $items['admin/commerce/config/checkout'] = array(
    'title' => 'Checkout settings',
    'description' => 'Configure checkout settings and customize the checkout form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_checkout_settings_form'),
    'access arguments' => array('administer checkout'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/commerce_checkout.admin.inc',
  );
  $items['admin/commerce/config/checkout/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/commerce/config/checkout/form'] = array(
    'title' => 'Checkout form',
    'description' => 'Build your checkout pages using module defined checkout form elements.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_checkout_builder_form'),
    'access arguments' => array('administer checkout'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'includes/commerce_checkout.admin.inc',
  );
  $items['admin/commerce/config/checkout/form/pane/%commerce_checkout_pane'] = array(
    'title callback' => 'commerce_checkout_pane_settings_title',
    'title arguments' => array(6),
    'description' => 'Configure the settings for a checkout pane.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_checkout_pane_settings_form', 6),
    'access arguments' => array('administer checkout'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_checkout.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_checkout_permission() {
  $permissions = array(
    'administer checkout' => array(
      'title' => t('Administer checkout'),
      'description' => t('Configure checkout settings and the checkout form itself.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_help().
 */
function commerce_checkout_help($path, $arg) {
  if ($path == 'admin/commerce/config/checkout-builder') {
    return t('Use the table below to build your checkout form using the available checkout panes defined by modules enabled on your site. You may configure the checkout pane settings using the operations links below. You may also add additional pages to the checkout process using the tab above and edit them using the operations links below.');
  }
}

/**
 * Implements hook_theme().
 */
function commerce_checkout_theme() {
  return array(
    'commerce_checkout_builder_form' => array(
      'render element' => 'form',
      'file' => 'includes/commerce_checkout.admin.inc',
    ),
    'commerce_checkout_review' => array(
      'render element' => 'form',
      'file' => 'includes/commerce_checkout.pages.inc',
    ),
  );
}

/**
 * Returns an array of checkout pages based on the checkout settings.
 *
 * @param $review
 *   TRUE or FALSE indicating whether or not to include the review page.
 *
 * @return
 *   An associative array of checkout page objects keyed by the page_id.
 */
function commerce_checkout_pages($review = TRUE) {
  $checkout_pages = &drupal_static(__FUNCTION__);

  // If the checkout pages haven't been defined yet, do so now.
  if (empty($checkout_pages)) {
    $checkout_pages = module_invoke_all('commerce_checkout_page_info');
    drupal_alter('commerce_checkout_page_info', $checkout_pages, $review);

    $count = 0;
    foreach ($checkout_pages as $page_id => $checkout_page) {
      $defaults = array(
        'page_id' => $page_id,
        'title' => '',
        'help' => '',
        'back_value' => t('Back'),
        'submit_value' => t('Continue'),
        'weight' => $count++ / count($checkout_pages),
        'prev_page' => NULL,
        'next_page' => NULL,
      );

      $checkout_pages[$page_id] = (object) ((array) $checkout_page + $defaults);
    }

    uasort($checkout_pages, 'commerce_sort_weight');

    // Initialize the previous and next pages.
    $previous_page = NULL;
    $checkout_page = NULL;
    foreach ($checkout_pages as $checkout_page) {
      if ($previous_page) {
        $checkout_page->prev_page = $previous_page->page_id;
        $previous_page->next_page = $checkout_page->page_id;
      }
      $previous_page = $checkout_page;
    }
  }

  return $checkout_pages;
}

/**
 * Returns a checkout page object.
 *
 * @param $page_id
 *   The ID of the page to return.
 *
 * @return
 *   The fully loaded page object or FALSE if not found.
 */
function commerce_checkout_page_load($page_id) {
  $checkout_pages = commerce_checkout_pages();

  // If a page was specified that does not exist, return FALSE.
  if (empty($checkout_pages[$page_id])) {
    return FALSE;
  }

  // Otherwise, return the specified page.
  return $checkout_pages[$page_id];
}

/**
 * Return a filtered array of checkout pane objects.
 *
 * @param $conditions
 *   An array of conditions to filter the returned list by; for example, if you
 *     specify 'enabled' => TRUE in the array, then only checkout panes with an
 *     enabled value equal to TRUE would be included.
 *
 * @return
 *   The array of checkout panes, keyed by pane ID.
 */
function commerce_checkout_panes($conditions = array()) {
  $saved_panes = &drupal_static('saved_checkout_panes');
  $checkout_panes = &drupal_static(__FUNCTION__);

  // Cache the saved checkout pane data if it hasn't been loaded yet.
  if (empty($saved_panes)) {
    $saved_panes = db_query('SELECT * FROM {commerce_checkout_pane}')->fetchAllAssoc('pane_id');
  }

  // Generate a unique ID for the filter.
  $conditions_id = hash('sha256', serialize($conditions));

  // If the panes haven't been defined for this filter yet...
  if (!isset($checkout_panes[$conditions_id])) {
    $temp = array();

    // Update the array with the values from the settings form and filter out
    // any that don't match the filter criteria.
    foreach (module_implements('commerce_checkout_pane_info') as $module) {
      foreach (module_invoke($module, 'commerce_checkout_pane_info') as $pane_id => $checkout_pane) {
        $checkout_pane->pane_id = $pane_id;
        $checkout_pane->module = $module;

        // Set some defaults for the checkout pane.
        $defaults = array(
          'name' => $checkout_pane->title,
          'page' => 1,
          'collapsible' => FALSE,
          'collapsed' => FALSE,
          'weight' => 0,
          'enabled' => TRUE,
          'review' => TRUE,
        );
        $checkout_pane = (object) array_merge($defaults, (array) $checkout_pane);

        // Update the pane with saved data.
        if (!empty($saved_panes[$pane_id])) {
          $checkout_pane = (object) array_merge((array) $saved_panes[$pane_id] + (array) $checkout_pane);
          $checkout_pane->saved = TRUE;
        }

        // Allow other modules to alter this checkout pane before filtering it.
        drupal_alter('commerce_checkout_pane_info', $checkout_pane);

        // Check the pane against the filter array to determine whether to add it
        // to the panes array or not.
        $valid = TRUE;

        foreach ($conditions as $attribute => $value) {
          // If the current value for the specified attribute on the pane does not
          // match the filter value...
          if ($checkout_pane->{$attribute} != $value) {
            // Do not add it to the temporary array.
            $valid = FALSE;
          }
        }

        if ($valid) {
          $temp[$pane_id] = $checkout_pane;
        }
      }
    }

    // Sort the panes by their weight value.
    uasort($temp, 'commerce_sort_weight');

    // Build the cached panes array using the sorted array of checkout panes.
    $checkout_panes[$conditions_id] = $temp;
  }

  return $checkout_panes[$conditions_id];
}

/**
 * Saves a checkout pane's configuration to the database.
 *
 * @param $checkout_pane
 *   The fully loaded checkout pane object.
 *
 * @return
 *   The return value of the call to drupal_write_record() to save the checkout
 *     pane, either FALSE on failure or SAVED_NEW or SAVED_UPDATED indicating
 *     the type of query performed to save the checkout pane.
 */
function commerce_checkout_pane_save($checkout_pane) {
  return drupal_write_record('commerce_checkout_pane', $checkout_pane, !empty($checkout_pane->saved) ? 'pane_id' : NULL);
}

/**
 * Loads the data for a specific checkout pane.
 *
 * @param $pane_id
 *   The machine readable ID of the checkout pane.
 *
 * @return
 *   The requested checkout pane object or FALSE if not found.
 */
function commerce_checkout_pane_load($pane_id) {
  // Loads the entire list of panes.
  $checkout_panes = commerce_checkout_panes();

  // Return FALSE if the pane does not exist.
  if (empty($checkout_panes[$pane_id])) {
    return FALSE;
  }

  return $checkout_panes[$pane_id];
}

/**
 * Return the title of a checkout pane settings form page.
 *
 * @param $checkout_pane
 *   The checkout pane object represented on the settings form.
 */
function commerce_checkout_pane_settings_title($checkout_pane) {
  return t("'@pane' checkout pane", array('@pane' => $checkout_pane->name));
}

/**
 * Resets a checkout pane by pane_id to its module defined defaults.
 */
function commerce_checkout_pane_reset($pane_id) {
  db_delete('commerce_checkout_pane')
    ->condition('pane_id', $pane_id)
    ->execute();
}

/**
 * Returns the specified callback for the given checkout pane if it's available,
 *   loading the checkout pane include file if specified.
 *
 * @param $checkout_pane
 *   The checkout pane object.
 * @param $callback
 *   The callback function to return, one of:
 *   - settings_form
 *   - checkout_form
 *   - checkout_form_validate
 *   - checkout_form_submit
 *   - review
 *
 * @return
 *   A string containing the name of the callback function or FALSE if it could
 *     not be found.
 */
function commerce_checkout_pane_callback($checkout_pane, $callback) {
  // Include the checkout pane file if specified.
  if (!empty($checkout_pane->file)) {
    $parts = explode('.', $checkout_pane->file);

    module_load_include(array_pop($parts), $checkout_pane->module, implode('.', $parts));
  }

  // If the specified callback function exists, return it.
  if (!empty($checkout_pane->callbacks[$callback]) &&
      function_exists($checkout_pane->callbacks[$callback])) {
    return $checkout_pane->callbacks[$callback];
  }

  // Otherwise return FALSE.
  return FALSE;
}

/**
 * Completes the checkout process for the given order.
 */
function commerce_checkout_complete(&$form_state, $order) {
  // Determine what to do for anonymous users completing checkout.
  if ($order->customer_uid == 0) {
    $create = variable_get('commerce_checkout_anonymous_account', 2);
    $notify = variable_get('commerce_checkout_anonymous_notify', 3);

    // TODO: Pull $name and $mail from a customer information checkout pane,
    // then remove the FALSE from this if statement.
    if (FALSE && $create > 0) {
      $account = commerce_checkout_create_account($name, $mail, '', $create == 1 ? 0 : 1, $notify >= 2);

      $order->customer_uid = $account->uid;
      $order = commerce_order_save($order);
    }
    else {
      $account = FALSE;
    }
  }

  // Move the order status to the default "Pending" status if it hasn't
  // already been updated.
  if ($order->status == $form_state['values']['order']->status) {
    $order_state = commerce_order_state_load('pending');
    $order = commerce_order_status_update($order, $order_state->default_status);
  }

  // TODO: Update to use Rules; the third argument should pass the proper account.
  // ca_pull_trigger('uc_checkout_complete', $order, $order->uid == 0 && $account ? $account : $user);
}

/**
 * Creates a new user account with the specified parameters and notification.
 *
 * @param $name
 *   The new account username.
 * @param $mail
 *   The e-mail address associated with the new account.
 * @param $pass
 *   The new account password. If left empty, a password will be generated.
 * @param $status
 *   TRUE or FALSE indicating the active / blocked status of the account.
 * @param $notify
 *   TRUE or FALSE indicating whether or not to e-mail the new account details
 *     to the user.
 *
 * @return
 *   The account user object.
 */
function commerce_checkout_create_account($name, $mail, $pass, $status, $notify = FALSE) {
  // Setup the account fields array and save it as a new user.
  $fields = array(
    'name' => $name,
    'mail' => $mail,
    'init' => $mail,
    'pass' => empty($pass) ? user_password(variable_get('commerce_password_length', 8)) : $pass,
    'roles' => array(),
    'status' => $status,
  );
  $account = user_save('', $fields);

  // Manually set the password so it appears in the e-mail.
  $account->password = $fields['pass'];

  // Send the customer their account details if enabled.
  if ($notify) {
    // Send the e-mail through the user module.
    drupal_mail('user', 'register_no_approval_required', $mail, NULL, array('account' => $account), commerce_email_from());
  }

  return $account;
}
