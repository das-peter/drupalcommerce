<?php
// $Id$

/**
 * @file
 * Defines tax rates and Rules integration for configuring tax rules for
 *   applicability and display.
 */


/**
 * Implements hook_commerce_cart_line_item_refresh().
 *
 * Because some taxes require the order context to calculate, we have to check
 * taxes when the line item is refreshed in the cart.
 */
function commerce_tax_commerce_cart_line_item_refresh($line_item, $order_wrapper) {
  rules_invoke_event('commerce_tax_calculate_order', $line_item, $order_wrapper->value());
}

/**
 * Returns an array of tax type objects keyed by name.
 */
function commerce_tax_types() {
  // First check the static cache for a tax types array.
  $tax_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($tax_types)) {
    $tax_types = array();

    // Find tax types defined by hook_commerce_tax_type_info().
    foreach (module_implements('commerce_tax_type_info') as $module) {
      foreach (module_invoke($module, 'commerce_tax_type_info') as $name => $tax_type) {
        // Initialize tax rate properties if necessary.
        $defaults = array(
          'name' => $name,
          'display_title' => $tax_type['title'],
          'description' => '',
          'display_inclusive' => FALSE,
          'order_context' => FALSE,
          'module' => $module,
        );

        $tax_types[$name] = (object) array_merge($defaults, $tax_type);
      }
    }

    // Last allow the info to be altered by other modules.
    drupal_alter('commerce_tax_type_info', $tax_types);
  }

  return $tax_types;
}

/**
 * Resets the cached list of tax types.
 */
function commerce_tax_types_reset() {
  $tax_types = &drupal_static('commerce_tax_types');
  $tax_types = NULL;
}

/**
 * Returns a single tax type object.
 *
 * @param $name
 *   The name of the tax type to return.
 *
 * @return
 *   The specified tax type object or FALSE if it did not exist.
 */
function commerce_tax_type_load($name) {
  $tax_types = commerce_tax_types();
  return empty($tax_types[$name]) ? FALSE : $tax_types[$name];
}

/**
 * Returns the titles of every tax type keyed by name.
 */
function commerce_tax_type_titles() {
  $titles = array();

  foreach (commerce_tax_types() as $name => $tax_type) {
    $titles[$name] = $tax_type->title;
  }

  return $titles;
}

/**
 * Returns the titles of every tax type that requires an order context keyed
 *   by name.
 */
function commerce_tax_type_order_context_titles() {
  $titles = array();

  foreach (commerce_tax_types() as $name => $tax_type) {
    if ($tax_type->order_context) {
      $titles[$name] = $tax_type->title;
    }
  }

  return $titles;
}

/**
 * Returns an array of tax rate objects keyed by name.
 */
function commerce_tax_rates() {
  // First check the static cache for a tax rates array.
  $tax_rates = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($tax_rates)) {
    $tax_rates = array();

    // Find tax rates defined by hook_commerce_tax_rate_info().
    foreach (module_implements('commerce_tax_rate_info') as $module) {
      foreach (module_invoke($module, 'commerce_tax_rate_info') as $name => $tax_rate) {
        // Initialize tax rate properties if necessary.
        $defaults = array(
          'name' => $name,
          'display_title' => $tax_rate['title'],
          'description' => '',
          'rate' => 0,
          'type' => '',
          'component' => TRUE,
          'module' => $module,
        );

        $tax_rates[$name] = (object) array_merge($defaults, $tax_rate);
      }
    }

    // Last allow the info to be altered by other modules.
    drupal_alter('commerce_tax_rate_info', $tax_rates);
  }

  return $tax_rates;
}

/**
 * Resets the cached list of tax rates.
 */
function commerce_tax_rates_reset() {
  $tax_rates = &drupal_static('commerce_tax_rates');
  $tax_rates = NULL;
}

/**
 * Returns a single tax rate object.
 *
 * @param $name
 *   The name of the tax rate to return.
 *
 * @return
 *   The specified tax rate object or FALSE if it did not exist.
 */
function commerce_tax_rate_load($name) {
  $tax_rates = commerce_tax_rates();
  return empty($tax_rates[$name]) ? FALSE : $tax_rates[$name];
}

/**
 * Returns the titles of every tax rate keyed by name.
 */
function commerce_tax_rate_titles() {
  $titles = array();

  foreach (commerce_tax_rates() as $name => $tax_rate) {
    $titles[$name] = $tax_rate->title;
  }

  return $titles;
}

/**
 * Calculates taxes of a particular type by invoking any components that match
 *   the tax type and arguments passed.
 *
 * @param $tax_type
 *   The tax type object whose rates should be calculated.
 * @param $line_item
 *   The line item to which the taxes should be applied.
 * @param $order
 *   If available, the order to which the line items belong.
 */
function commerce_tax_type_calculate_rates($tax_type, $line_item, $order = NULL) {
  // Load all the rule components.
  $components = rules_get_components(FALSE, 'action');

  // Loop over each tax rate in search of matching components.
  foreach (commerce_tax_rates() as $name => $tax_rate) {
    // If the current rate matches the type and specifies a default component...
    if ($tax_rate->type == $tax_type->name && $tax_rate->component) {
      $component_name = 'commerce_tax_rate_' . $name;

      // If we can load the current rate's component...
      if (!empty($components[$component_name])) {
        // Invoke it using the appropriate arguments for the type.
        if ($tax_type->order_context) {
          rules_invoke_component($component_name, $line_item, $order);
        }
        else {
          rules_invoke_component($component_name, $line_item);
        }
      }
    }
  }

  // Allow modules handling tax application on their own to apply rates of the
  // current type as well.
  module_invoke_all('commerce_tax_type_calculate_rates', $tax_type, $line_item, $order);
}

/**
 * Applies a tax rate to the unit price of a line item.
 *
 * @param $tax_rate
 *   The tax rate to apply to the line item.
 * @param $line_item
 *   The line item whose unit price will be modified to include the tax.
 */
function commerce_tax_rate_apply($tax_rate, $line_item) {
  // If a valid rate is specified...
  if (is_numeric($tax_rate->rate)) {
    $wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

    // Create a price data structure for the tax.
    $tax_price = array(
      'amount' => $wrapper->unit_price->amount->value() * $tax_rate->rate,
      'currency_code' => $wrapper->unit_price->currency_code,
      'data' => array(),
    );

    // TODO: Add the tax price to the unit price's data array; requires entity
    // property info integration for the data property.

    // If the rate specifies a valid tax type...
    if ($tax_type = commerce_tax_type_load($tax_rate->type)) {
      // Include the tax amount in the displayed unit price if specified.
      if ($tax_type->display_inclusive) {
        $wrapper->unit_price->amount = $wrapper->unit_price->amount->value() + $tax_price['amount'];
      }
    }
  }
}
